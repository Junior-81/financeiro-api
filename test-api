# Script para testar a API do Sistema Financeiro
$baseUrl = "http://localhost:8080"


# Fun√ß√£o para testar se a API est√° rodando
function Test-ApiHealth {
    try {
        $response = Invoke-RestMethod -Uri "$baseUrl/actuator/health" -Method Get -TimeoutSec 5
        return $true
    }
    catch {
        return $false
    }
}

# Verificar se a API est√° rodando
Write-Host "1. Verificando se a API est√° rodando..." -ForegroundColor Yellow
if (Test-ApiHealth) {
    Write-Host "‚úÖ API est√° rodando!" -ForegroundColor Green
}
else {
    Write-Host "‚ùå API n√£o est√° rodando. Execute 'start-clean.ps1' primeiro!" -ForegroundColor Red
    exit 1
}

Write-Host ""
Write-Host "2. Testando endpoints..." -ForegroundColor Yellow

# Teste 1: Listar clientes
Write-Host "   üìã Listando clientes existentes..." -ForegroundColor Cyan
try {
    $clients = Invoke-RestMethod -Uri "$baseUrl/api/clients" -Method Get
    Write-Host "   ‚úÖ GET /api/clients - OK ($($clients.Count) clientes)" -ForegroundColor Green
    
    if ($clients.Count -gt 0) {
        foreach ($client in $clients) {
            Write-Host "      - $($client.name) ($($client.clientType))" -ForegroundColor White
        }
    }
}
catch {
    Write-Host "   ‚ùå Erro ao listar clientes: $($_.Exception.Message)" -ForegroundColor Red
}

# Teste 2: Criar cliente PF (formato correto)
Write-Host "   üë§ Criando cliente Pessoa F√≠sica..." -ForegroundColor Cyan
$clientPF = @{
    name = "Ana Paula Silva"
    cpf = "11122233344"
    clientType = "INDIVIDUAL"
    phone = "11987654321"
    cellPhone = "11987654321"
    email = "ana@email.com"
    initialBalance = 2000.00
} | ConvertTo-Json

try {
    $newClientPF = Invoke-RestMethod -Uri "$baseUrl/api/clients" -Method Post -Body $clientPF -ContentType "application/json"
    Write-Host "   ‚úÖ POST /api/clients (PF) - Criado! ID: $($newClientPF.id)" -ForegroundColor Green
    $clientPFId = $newClientPF.id
}
catch {
    Write-Host "   ‚ö†Ô∏è Cliente PF pode j√° existir (CPF duplicado)" -ForegroundColor Yellow
    Write-Host "      Erro: $($_.Exception.Message)" -ForegroundColor Red
}

# Teste 3: Criar cliente PJ (formato correto)
Write-Host "   üè¢ Criando cliente Pessoa Jur√≠dica..." -ForegroundColor Cyan
$clientPJ = @{
    name = "Inova√ß√£o Tech Solutions LTDA"
    cnpj = "55667788000123"
    clientType = "CORPORATE"
    phone = "1144445555"
    cellPhone = "11977776666"
    email = "contato@inovacaotech.com"
    initialBalance = 15000.00
} | ConvertTo-Json

try {
    $newClientPJ = Invoke-RestMethod -Uri "$baseUrl/api/clients" -Method Post -Body $clientPJ -ContentType "application/json"
    Write-Host "   ‚úÖ POST /api/clients (PJ) - Criado! ID: $($newClientPJ.id)" -ForegroundColor Green
    $clientPJId = $newClientPJ.id
}
catch {
    Write-Host "   ‚ö†Ô∏è Cliente PJ pode j√° existir (CNPJ duplicado)" -ForegroundColor Yellow
    Write-Host "      Erro: $($_.Exception.Message)" -ForegroundColor Red
}

# Teste 4: Listar contas (criadas automaticamente)
Write-Host "   üí≥ Listando contas criadas automaticamente..." -ForegroundColor Cyan
try {
    $accounts = Invoke-RestMethod -Uri "$baseUrl/api/accounts" -Method Get
    Write-Host "   ‚úÖ GET /api/accounts - OK ($($accounts.Count) contas)" -ForegroundColor Green
    
    if ($accounts.Count -gt 0) {
        foreach ($account in $accounts) {
            Write-Host "      - Conta: $($account.accountNumber) - Saldo: R$ $($account.balance)" -ForegroundColor White
            if (-not $accountId) { $accountId = $account.id }
        }
    }
}
catch {
    Write-Host "   ‚ùå Erro ao listar contas: $($_.Exception.Message)" -ForegroundColor Red
}

# Teste 5: Criar transa√ß√£o de cr√©dito
if ($accountId) {
    Write-Host "   üí∞ Criando transa√ß√£o de cr√©dito..." -ForegroundColor Cyan
    $transacaoCredito = @{
        amount = 750.00
        operationType = "C"
    } | ConvertTo-Json

    try {
        $newTransacao = Invoke-RestMethod -Uri "$baseUrl/api/transactions/account/$accountId" -Method Post -Body $transacaoCredito -ContentType "application/json"
        Write-Host "   ‚úÖ Transa√ß√£o de cr√©dito criada: R$ 750,00" -ForegroundColor Green
    }
    catch {
        Write-Host "   ‚ùå Erro ao criar transa√ß√£o: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# Teste 6: Criar transa√ß√£o de d√©bito
if ($accountId) {
    Write-Host "   üí∏ Criando transa√ß√£o de d√©bito..." -ForegroundColor Cyan
    $transacaoDebito = @{
        amount = 200.00
        operationType = "D"
    } | ConvertTo-Json

    try {
        $newTransacao = Invoke-RestMethod -Uri "$baseUrl/api/transactions/account/$accountId" -Method Post -Body $transacaoDebito -ContentType "application/json"
        Write-Host "   ‚úÖ Transa√ß√£o de d√©bito criada: R$ 200,00" -ForegroundColor Green
    }
    catch {
        Write-Host "   ‚ùå Erro ao criar transa√ß√£o: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# Teste 7: Criar endere√ßo para cliente
if ($clientPFId) {
    Write-Host "   üè† Criando endere√ßo para cliente..." -ForegroundColor Cyan
    $endereco = @{
        clientId = $clientPFId
        street = "Avenida Paulista"
        addressNumber = "1000"
        neighborhood = "Bela Vista"
        city = "S√£o Paulo"
        state = "SP"
        zipCode = "01310100"
    } | ConvertTo-Json

    try {
        $newEndereco = Invoke-RestMethod -Uri "$baseUrl/api/addresses" -Method Post -Body $endereco -ContentType "application/json"
        Write-Host "   ‚úÖ Endere√ßo criado com ID: $($newEndereco.id)" -ForegroundColor Green
    }
    catch {
        Write-Host "   ‚ùå Erro ao criar endere√ßo: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# Teste 8: Testar relat√≥rios
Write-Host ""
Write-Host "3. Testando relat√≥rios..." -ForegroundColor Yellow

# Buscar um cliente existente para relat√≥rios
try {
    $clients = Invoke-RestMethod -Uri "$baseUrl/api/clients" -Method Get
    if ($clients.Count -gt 0) {
        $testClientId = $clients[0].id
        
        # Relat√≥rio de saldo
        Write-Host "   üìä Testando relat√≥rio de saldo..." -ForegroundColor Cyan
        try {
            $relatorio = Invoke-RestMethod -Uri "$baseUrl/api/reports/client/$testClientId/balance" -Method Get
            Write-Host "   ‚úÖ Relat√≥rio de saldo - OK" -ForegroundColor Green
            Write-Host "      Cliente: $($relatorio.clientName)" -ForegroundColor White
            Write-Host "      Saldo atual: R$ $($relatorio.currentBalance)" -ForegroundColor White
        }
        catch {
            Write-Host "   ‚ùå Erro no relat√≥rio de saldo: $($_.Exception.Message)" -ForegroundColor Red
        }

        # Fun√ß√£o PL/SQL - C√°lculo de tarifa
        Write-Host "   üîß Testando fun√ß√£o PL/SQL (tarifa)..." -ForegroundColor Cyan
        try {
            $tarifa = Invoke-RestMethod -Uri "$baseUrl/api/reports/client/$testClientId/fee" -Method Get
            Write-Host "   ‚úÖ Fun√ß√£o PL/SQL - OK. Tarifa: R$ $tarifa" -ForegroundColor Green
        }
        catch {
            Write-Host "   ‚ùå Erro na fun√ß√£o PL/SQL: $($_.Exception.Message)" -ForegroundColor Red
        }
    }
}
catch {
    Write-Host "   ‚ùå Erro ao buscar clientes para relat√≥rios" -ForegroundColor Red
}

# Teste 9: Relat√≥rio de receita da empresa
Write-Host "   üíº Testando relat√≥rio de receita da empresa..." -ForegroundColor Cyan
try {
    $startDate = (Get-Date).AddDays(-30).ToString("yyyy-MM-dd")
    $endDate = (Get-Date).ToString("yyyy-MM-dd")
    
    $receita = Invoke-RestMethod -Uri "$baseUrl/api/reports/company/revenue?startDate=$startDate&endDate=$endDate" -Method Get
    Write-Host "   ‚úÖ Relat√≥rio de receita - OK. Total: R$ $($receita.totalRevenue)" -ForegroundColor Green
}
catch {
    Write-Host "   ‚ùå Erro no relat√≥rio de receita: $($_.Exception.Message)" -ForegroundColor Red
}

# Teste 10: Listar todos os clientes finalmente
Write-Host "   üìã Listando todos os clientes finais..." -ForegroundColor Cyan
try {
    $clients = Invoke-RestMethod -Uri "$baseUrl/api/clients" -Method Get
    Write-Host "   ‚úÖ GET /api/clients - Total final: $($clients.Count) clientes" -ForegroundColor Green
    
    foreach ($client in $clients) {
        Write-Host "      - $($client.name) ($($client.clientType))" -ForegroundColor White
    }
}
catch {
    Write-Host "   ‚ùå Erro ao listar clientes finais: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host ""
Write-Host "===========================================" -ForegroundColor Green
Write-Host "     Teste Completo Conclu√≠do!" -ForegroundColor Green
Write-Host "===========================================" -ForegroundColor Green
Write-Host ""
Write-Host "üéØ RESULTADOS DO TESTE:" -ForegroundColor Yellow
Write-Host "‚úÖ API funcionando" -ForegroundColor Green
Write-Host "‚úÖ CRUD de clientes testado" -ForegroundColor Green
Write-Host "‚úÖ CRUD de contas testado" -ForegroundColor Green
Write-Host "‚úÖ Sistema de transa√ß√µes testado" -ForegroundColor Green
Write-Host "‚úÖ CRUD de endere√ßos testado" -ForegroundColor Green
Write-Host "‚úÖ Relat√≥rios funcionando" -ForegroundColor Green
Write-Host "‚úÖ PL/SQL integrado e funcionando" -ForegroundColor Green
Write-Host ""
Write-Host "üåê URLs √∫teis:" -ForegroundColor Yellow
Write-Host "- Swagger: $baseUrl/swagger-ui.html" -ForegroundColor White
Write-Host "- Health Check: $baseUrl/actuator/health" -ForegroundColor White
Write-Host "- API Clientes: $baseUrl/api/clients" -ForegroundColor White
Write-Host "- API Relat√≥rios: $baseUrl/api/reports/*" -ForegroundColor White
Write-Host ""
Write-Host "TESTE COMPLETO CONCLU√çDO!" -ForegroundColor Green